<!DOCTYPE html>
<html>
  <head>
    <title>Real-Time Group Chat Nodejs</title>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="css/style.css">
    <script src="../../socket.io/socket.io.js"></script>
    <script src="//code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="js/plugins.js"></script>
  </head>
  <body>
    <div id="messageContent">
        <ul id="messages"></ul>
        <ul id="notifications"></ul>
    </div>
    <form action="/" method="POST" id="chatForm">
        <!-- Used by Emoji-Picker-jQuery-Emoji-Plugin -->
        <div class="emotion">
           <div id="txt" class="input" autocomplete="off" autofocus="on" oninput="isTyping()"  contenteditable="true" placeholder="Enter your message here..."></div>
            <span class="emotion-Icon">
               <i class="fa fa-smile-o fa-lg fa-fw" aria-hidden="true"></i>
               <div class="emotion-area"></div>
            </span>
            <span class="people">
                <i class="fa fa-user-o fa-lg fa-fw" aria-hidden="true"></i>
                <div class="people-online"></div>
            </span>
        </div>

        <!--<input id="txt" autocomplete="off" contenteditable="true" autofocus="on" oninput="isTyping()" placeholder="type your message here...">-->
        <div class="value"></div>
        <button>Send</button>

    </form>
    <script>
            let socket = io.connect('http://localhost:8080');
            let typingTimer; //timer identifier 
            let doneTypingInterval = 2000;  //time in ms (5 seconds)
            let users = 0;
            
            // Ask for username at the start
            let username = prompt('Who would you like to be identified as ?');
            socket.emit('username', username);
            $('#txt').focus();

            // User is typing
            function isTyping(){
                socket.emit('typing');
                typingTimer = setTimeout(doneTyping, doneTypingInterval);
            }

            //user is "finished typing," send a doneTyping event to the index.js
            function doneTyping () {
                socket.emit('doneTyping');
                clearTimeout(typingTimer);
            }

            // submit text message without reload/refresh the page
            $('form').submit(function(e){
                e.preventDefault(); // prevents page reloading
                $('#txt').focus();
                socket.emit('doneTyping');
                
                // Checks if the message to be send is not "empty"
                /*if($('#txt').val()){
                    socket.emit('chat_message', $('#txt').val());
                }
                
                $('#txt').val('');*/
                
                if($('#txt').text() || $('#txt').html()){
                    // Send the message
                    socket.emit('chat_message', $('#txt').html());
                    // Auto clear the input box once the message has been sent
                    $('#txt').text('');
                }

                return false;
            });

            /*  Prevent the message input from inserting a new line when ENTER key is pressed
                Instead set ENTER to be used for sending messages and a combination of keys - SHIFT + ENTER to be used for adding a new line 
            */
            $('div[contenteditable]').keydown(function(e) {
                if (!e) {
                    e = window.event;
                }
                if (e.keyCode == 13){
                    if (!event.shiftKey){ 
                        $('form').submit();
                        if (e.preventDefault) {
                            e.preventDefault();
                        } else {
                            e.returnValue = false;
                        }
                    }
                }
            });

            /****************** Handling the events emitted by the index.js server ******************/
            // Add the "user is typing" notification
            socket.on('typing', function(data){
                if(username != data.username){
                    $('#notifications').html('<li id="typing"><i>' + data.notification + '</i>');
                    // Auto Scroll to the bottom of the page if the content goes out of the viewport
                    $('html, body').animate({scrollTop:$(document).height()}, 'slow');
                }
            });
            // Remove the "username is typing" message
            socket.on('doneTyping', function(){
                $('#notifications').html("");
            });
            // append the message to the message board
            socket.on('chat_message', function(msg){
                $('#messages').append($('<li>').html(msg));
                // Auto Scroll to the bottom of the page if the content goes out of the viewport
                $('html, body').animate({scrollTop:$(document).height()}, 'slow');
            });
            // append text if someone is online
            socket.on('is_online', function(username) {
                let userOnline = username.split("=>");
                $('#messages').append($('<li>').html(userOnline[0]));
                $('.people-online').html('There are <strong> ' +  userOnline[1] + ' </strong>people online');
            });
    </script>
  </body>
</html>